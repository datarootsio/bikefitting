name: 'Streamlit frontend'
on:
  push:
    branches:
      - master
    paths:
      - 'frontend/**'
env:
  # Set the Environment variables to the names of the used Azure resources
  REGISTERY: 'crBikefitting'
  RESOURCEGROUP: 'rg-bikefitting-tf'
  STORAGEACCOUNT: 'sabikefittingtf'
  IMAGE_NAME: 'bikefitting-frontend-image'

jobs:
  run-linters:
    name: 'Linting'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out Git repository'
        uses: actions/checkout@v2

      - name: 'Set up Python'
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: 'Install Python dependencies'
        run: |
          python -m pip install --no-cache-dir --upgrade pip
          pip install black flake8

      - name: 'Run linters'
        working-directory: frontend
        run: |
          black ./src/
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --ignore=E402,W503,W504 --max-complexity=10 --max-line-length=127 --statistics

  run-testing:
    name: 'Testing'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out Git repository'
        uses: actions/checkout@v2

      - name: 'Set up Python'
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: 'Install Python dependencies'
        run: |
          python -m pip install --no-cache-dir --upgrade pip
          pip install pytest coverage poetry

      - name: 'Install Poetry dependencies'
        working-directory: frontend
        run: |
          poetry config virtualenvs.create false
          poetry install --no-root

      - name: 'Azure Login'
        uses: Azure/login@v1
        with:
          enable-AzPSSession: true
          creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

      - name: 'Set environment variables for testing'
        run: |
          echo "AZURE_CLIENT_ID=${{ secrets.CLIENT_ID }}" >> $GITHUB_ENV
          echo "AZURE_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "AZURE_TENANT_ID=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
          echo "AZURE_STORAGE_CONNECTION_ACCOUNT=$STORAGEACCOUNT" >> $GITHUB_ENV

      - name: 'Run pytest with coverage'
        run: |
          coverage run -m pytest ./frontend/src/test
          coverage xml

      - name: 'Upload coverage to Codecov'
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  build-container:
    name: 'Build and upload frontend image to Azure Container registry'
    runs-on: ubuntu-latest
    needs: [run-linters, run-testing]
    env:
      ID: ${{ secrets.CLIENT_ID }}
      CLIENT: ${{ secrets.CLIENT_SECRET }}
      TENANT: ${{ secrets.TENANT_ID }}
      SUBSCRIBTION: ${{ secrets.SUBSCRIPTION_ID }}
    steps:
      - name: 'Azure Login'
        uses: Azure/login@v1
        with:
          enable-AzPSSession: true
          creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

      # Step to build and upload a docker image of the frontend to the Azure Container Registry
      - uses: actions/checkout@v2
      - name: 'Build and upload image to ACR'
        working-directory: frontend
        run: |
          STORAGEACCOUNT=$STORAGEACCOUNT
          az acr build --registry $REGISTERY --resource-group $RESOURCEGROUP --build-arg STORAGEACCOUNT --image $IMAGE_NAME .
